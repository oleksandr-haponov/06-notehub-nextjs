import api from "./axios";
import { Note } from "@/types/note";

// —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
const handleError = (error: unknown, action: string): never => {
  let userMessage = "";

  switch (action) {
    case "fetch notes":
      userMessage = "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫.";
      break;
    case "fetch note":
      userMessage = "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–º–µ—Ç–∫—É.";
      break;
    case "create note":
      userMessage = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É.";
      break;
    case "update note":
      userMessage = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É.";
      break;
    case "delete note":
      userMessage = "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É.";
      break;
    default:
      userMessage = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.";
  }

  if (error instanceof Error) {
    throw new Error(`${userMessage} –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${error.message}`);
  }
  throw new Error(userMessage);
};

export const fetchNotes = async (): Promise<Note[]> => {
  try {
    const { data } = await api.get("/notes");
    return data;
  } catch (error) {
    handleError(error, "fetch notes");
    throw error; // üëà –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è TS
  }
};

export const fetchNoteById = async (id: string): Promise<Note> => {
  try {
    const { data } = await api.get(`/notes/${id}`);
    return data;
  } catch (error) {
    handleError(error, "fetch note");
    throw error;
  }
};

export const createNote = async (
  note: Omit<Note, "id" | "createdAt">,
): Promise<Note> => {
  try {
    const { data } = await api.post("/notes", note);
    return data;
  } catch (error) {
    handleError(error, "create note");
    throw error;
  }
};

export const updateNote = async (
  id: string,
  note: Partial<Note>,
): Promise<Note> => {
  try {
    const { data } = await api.put(`/notes/${id}`, note);
    return data;
  } catch (error) {
    handleError(error, "update note");
    throw error;
  }
};

export const deleteNote = async (id: string): Promise<Note> => {
  try {
    const { data } = await api.delete(`/notes/${id}`);
    return data;
  } catch (error) {
    handleError(error, "delete note");
    throw error;
  }
};
